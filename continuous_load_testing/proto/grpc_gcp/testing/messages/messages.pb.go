// Message definitions to be used by integration test service definitions.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.6
// source: grpc_gcp/testing/messages.proto

package testing

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of payload that should be returned.
type PayloadType int32

const (
	// Compressable text format.
	PayloadType_COMPRESSABLE PayloadType = 0
)

// Enum value maps for PayloadType.
var (
	PayloadType_name = map[int32]string{
		0: "COMPRESSABLE",
	}
	PayloadType_value = map[string]int32{
		"COMPRESSABLE": 0,
	}
)

func (x PayloadType) Enum() *PayloadType {
	p := new(PayloadType)
	*p = x
	return p
}

func (x PayloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_gcp_testing_messages_proto_enumTypes[0].Descriptor()
}

func (PayloadType) Type() protoreflect.EnumType {
	return &file_grpc_gcp_testing_messages_proto_enumTypes[0]
}

func (x PayloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayloadType.Descriptor instead.
func (PayloadType) EnumDescriptor() ([]byte, []int) {
	return file_grpc_gcp_testing_messages_proto_rawDescGZIP(), []int{0}
}

// The type of route that a client took to reach a server w.r.t. gRPCLB.
// The server must fill in "fallback" if it detects that the RPC reached
// the server via the "gRPCLB fallback" path, and "backend" if it detects
// that the RPC reached the server via "gRPCLB backend" path (i.e. if it got
// the address of this server from the gRPCLB server BalanceLoad RPC). Exactly
// how this detection is done is context and server dependent.
type GrpclbRouteType int32

const (
	// Server didn't detect the route that a client took to reach it.
	GrpclbRouteType_GRPCLB_ROUTE_TYPE_UNKNOWN GrpclbRouteType = 0
	// Indicates that a client reached a server via gRPCLB fallback.
	GrpclbRouteType_GRPCLB_ROUTE_TYPE_FALLBACK GrpclbRouteType = 1
	// Indicates that a client reached a server as a gRPCLB-given backend.
	GrpclbRouteType_GRPCLB_ROUTE_TYPE_BACKEND GrpclbRouteType = 2
)

// Enum value maps for GrpclbRouteType.
var (
	GrpclbRouteType_name = map[int32]string{
		0: "GRPCLB_ROUTE_TYPE_UNKNOWN",
		1: "GRPCLB_ROUTE_TYPE_FALLBACK",
		2: "GRPCLB_ROUTE_TYPE_BACKEND",
	}
	GrpclbRouteType_value = map[string]int32{
		"GRPCLB_ROUTE_TYPE_UNKNOWN":  0,
		"GRPCLB_ROUTE_TYPE_FALLBACK": 1,
		"GRPCLB_ROUTE_TYPE_BACKEND":  2,
	}
)

func (x GrpclbRouteType) Enum() *GrpclbRouteType {
	p := new(GrpclbRouteType)
	*p = x
	return p
}

func (x GrpclbRouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrpclbRouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_gcp_testing_messages_proto_enumTypes[1].Descriptor()
}

func (GrpclbRouteType) Type() protoreflect.EnumType {
	return &file_grpc_gcp_testing_messages_proto_enumTypes[1]
}

func (x GrpclbRouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrpclbRouteType.Descriptor instead.
func (GrpclbRouteType) EnumDescriptor() ([]byte, []int) {
	return file_grpc_gcp_testing_messages_proto_rawDescGZIP(), []int{1}
}

type BoolValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The bool value.
	Value         bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoolValue) Reset() {
	*x = BoolValue{}
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolValue) ProtoMessage() {}

func (x *BoolValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolValue.ProtoReflect.Descriptor instead.
func (*BoolValue) Descriptor() ([]byte, []int) {
	return file_grpc_gcp_testing_messages_proto_rawDescGZIP(), []int{0}
}

func (x *BoolValue) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

// A block of data, to simply increase gRPC message size.
type Payload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of data in body.
	Type PayloadType `protobuf:"varint,1,opt,name=type,proto3,enum=grpc_gcp.continuous_load_testing.PayloadType" json:"type,omitempty"`
	// Primary contents of payload.
	Body          []byte `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Payload) Reset() {
	*x = Payload{}
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_grpc_gcp_testing_messages_proto_rawDescGZIP(), []int{1}
}

func (x *Payload) GetType() PayloadType {
	if x != nil {
		return x.Type
	}
	return PayloadType_COMPRESSABLE
}

func (x *Payload) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

// A protobuf representation for grpc status. This is used by test
// clients to specify a status that the server should attempt to return.
type EchoStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          int32                  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EchoStatus) Reset() {
	*x = EchoStatus{}
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EchoStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoStatus) ProtoMessage() {}

func (x *EchoStatus) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoStatus.ProtoReflect.Descriptor instead.
func (*EchoStatus) Descriptor() ([]byte, []int) {
	return file_grpc_gcp_testing_messages_proto_rawDescGZIP(), []int{2}
}

func (x *EchoStatus) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *EchoStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Unary request.
type SimpleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Desired payload type in the response from the server.
	// If response_type is RANDOM, server randomly chooses one from other formats.
	ResponseType PayloadType `protobuf:"varint,1,opt,name=response_type,json=responseType,proto3,enum=grpc_gcp.continuous_load_testing.PayloadType" json:"response_type,omitempty"`
	// Desired payload size in the response from the server.
	ResponseSize int32 `protobuf:"varint,2,opt,name=response_size,json=responseSize,proto3" json:"response_size,omitempty"`
	// Optional input payload sent along with the request.
	Payload *Payload `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// Whether SimpleResponse should include username.
	FillUsername bool `protobuf:"varint,4,opt,name=fill_username,json=fillUsername,proto3" json:"fill_username,omitempty"`
	// Whether SimpleResponse should include OAuth scope.
	FillOauthScope bool `protobuf:"varint,5,opt,name=fill_oauth_scope,json=fillOauthScope,proto3" json:"fill_oauth_scope,omitempty"`
	// Whether to request the server to compress the response. This field is
	// "nullable" in order to interoperate seamlessly with clients not able to
	// implement the full compression tests by introspecting the call to verify
	// the response's compression status.
	ResponseCompressed *BoolValue `protobuf:"bytes,6,opt,name=response_compressed,json=responseCompressed,proto3" json:"response_compressed,omitempty"`
	// Whether server should return a given status
	ResponseStatus *EchoStatus `protobuf:"bytes,7,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
	// Whether the server should expect this request to be compressed.
	ExpectCompressed *BoolValue `protobuf:"bytes,8,opt,name=expect_compressed,json=expectCompressed,proto3" json:"expect_compressed,omitempty"`
	// Whether SimpleResponse should include server_id.
	FillServerId bool `protobuf:"varint,9,opt,name=fill_server_id,json=fillServerId,proto3" json:"fill_server_id,omitempty"`
	// Whether SimpleResponse should include grpclb_route_type.
	FillGrpclbRouteType bool `protobuf:"varint,10,opt,name=fill_grpclb_route_type,json=fillGrpclbRouteType,proto3" json:"fill_grpclb_route_type,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SimpleRequest) Reset() {
	*x = SimpleRequest{}
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleRequest) ProtoMessage() {}

func (x *SimpleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleRequest.ProtoReflect.Descriptor instead.
func (*SimpleRequest) Descriptor() ([]byte, []int) {
	return file_grpc_gcp_testing_messages_proto_rawDescGZIP(), []int{3}
}

func (x *SimpleRequest) GetResponseType() PayloadType {
	if x != nil {
		return x.ResponseType
	}
	return PayloadType_COMPRESSABLE
}

func (x *SimpleRequest) GetResponseSize() int32 {
	if x != nil {
		return x.ResponseSize
	}
	return 0
}

func (x *SimpleRequest) GetPayload() *Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SimpleRequest) GetFillUsername() bool {
	if x != nil {
		return x.FillUsername
	}
	return false
}

func (x *SimpleRequest) GetFillOauthScope() bool {
	if x != nil {
		return x.FillOauthScope
	}
	return false
}

func (x *SimpleRequest) GetResponseCompressed() *BoolValue {
	if x != nil {
		return x.ResponseCompressed
	}
	return nil
}

func (x *SimpleRequest) GetResponseStatus() *EchoStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

func (x *SimpleRequest) GetExpectCompressed() *BoolValue {
	if x != nil {
		return x.ExpectCompressed
	}
	return nil
}

func (x *SimpleRequest) GetFillServerId() bool {
	if x != nil {
		return x.FillServerId
	}
	return false
}

func (x *SimpleRequest) GetFillGrpclbRouteType() bool {
	if x != nil {
		return x.FillGrpclbRouteType
	}
	return false
}

// Unary response, as configured by the request.
type SimpleResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Payload to increase message size.
	Payload *Payload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// The user the request came from, for verifying authentication was
	// successful when the client expected it.
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	// OAuth scope.
	OauthScope string `protobuf:"bytes,3,opt,name=oauth_scope,json=oauthScope,proto3" json:"oauth_scope,omitempty"`
	// Server ID. This must be unique among different server instances,
	// but the same across all RPC's made to a particular server instance.
	ServerId string `protobuf:"bytes,4,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	// gRPCLB Path.
	GrpclbRouteType GrpclbRouteType `protobuf:"varint,5,opt,name=grpclb_route_type,json=grpclbRouteType,proto3,enum=grpc_gcp.continuous_load_testing.GrpclbRouteType" json:"grpclb_route_type,omitempty"`
	// Server hostname.
	Hostname      string `protobuf:"bytes,6,opt,name=hostname,proto3" json:"hostname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SimpleResponse) Reset() {
	*x = SimpleResponse{}
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimpleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleResponse) ProtoMessage() {}

func (x *SimpleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleResponse.ProtoReflect.Descriptor instead.
func (*SimpleResponse) Descriptor() ([]byte, []int) {
	return file_grpc_gcp_testing_messages_proto_rawDescGZIP(), []int{4}
}

func (x *SimpleResponse) GetPayload() *Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SimpleResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SimpleResponse) GetOauthScope() string {
	if x != nil {
		return x.OauthScope
	}
	return ""
}

func (x *SimpleResponse) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *SimpleResponse) GetGrpclbRouteType() GrpclbRouteType {
	if x != nil {
		return x.GrpclbRouteType
	}
	return GrpclbRouteType_GRPCLB_ROUTE_TYPE_UNKNOWN
}

func (x *SimpleResponse) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

// Client-streaming request.
type StreamingInputCallRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional input payload sent along with the request.
	Payload *Payload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// Whether the server should expect this request to be compressed. This field
	// is "nullable" in order to interoperate seamlessly with servers not able to
	// implement the full compression tests by introspecting the call to verify
	// the request's compression status.
	ExpectCompressed *BoolValue `protobuf:"bytes,2,opt,name=expect_compressed,json=expectCompressed,proto3" json:"expect_compressed,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StreamingInputCallRequest) Reset() {
	*x = StreamingInputCallRequest{}
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingInputCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingInputCallRequest) ProtoMessage() {}

func (x *StreamingInputCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingInputCallRequest.ProtoReflect.Descriptor instead.
func (*StreamingInputCallRequest) Descriptor() ([]byte, []int) {
	return file_grpc_gcp_testing_messages_proto_rawDescGZIP(), []int{5}
}

func (x *StreamingInputCallRequest) GetPayload() *Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *StreamingInputCallRequest) GetExpectCompressed() *BoolValue {
	if x != nil {
		return x.ExpectCompressed
	}
	return nil
}

// Client-streaming response.
type StreamingInputCallResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Aggregated size of payloads received from the client.
	AggregatedPayloadSize int32 `protobuf:"varint,1,opt,name=aggregated_payload_size,json=aggregatedPayloadSize,proto3" json:"aggregated_payload_size,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *StreamingInputCallResponse) Reset() {
	*x = StreamingInputCallResponse{}
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingInputCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingInputCallResponse) ProtoMessage() {}

func (x *StreamingInputCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingInputCallResponse.ProtoReflect.Descriptor instead.
func (*StreamingInputCallResponse) Descriptor() ([]byte, []int) {
	return file_grpc_gcp_testing_messages_proto_rawDescGZIP(), []int{6}
}

func (x *StreamingInputCallResponse) GetAggregatedPayloadSize() int32 {
	if x != nil {
		return x.AggregatedPayloadSize
	}
	return 0
}

// Configuration for a particular response.
type ResponseParameters struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Desired payload sizes in responses from the server.
	Size int32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Desired interval between consecutive responses in the response stream in
	// microseconds.
	IntervalUs int32 `protobuf:"varint,2,opt,name=interval_us,json=intervalUs,proto3" json:"interval_us,omitempty"`
	// Whether to request the server to compress the response. This field is
	// "nullable" in order to interoperate seamlessly with clients not able to
	// implement the full compression tests by introspecting the call to verify
	// the response's compression status.
	Compressed    *BoolValue `protobuf:"bytes,3,opt,name=compressed,proto3" json:"compressed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseParameters) Reset() {
	*x = ResponseParameters{}
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseParameters) ProtoMessage() {}

func (x *ResponseParameters) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseParameters.ProtoReflect.Descriptor instead.
func (*ResponseParameters) Descriptor() ([]byte, []int) {
	return file_grpc_gcp_testing_messages_proto_rawDescGZIP(), []int{7}
}

func (x *ResponseParameters) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ResponseParameters) GetIntervalUs() int32 {
	if x != nil {
		return x.IntervalUs
	}
	return 0
}

func (x *ResponseParameters) GetCompressed() *BoolValue {
	if x != nil {
		return x.Compressed
	}
	return nil
}

// Server-streaming request.
type StreamingOutputCallRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Desired payload type in the response from the server.
	// If response_type is RANDOM, the payload from each response in the stream
	// might be of different types. This is to simulate a mixed type of payload
	// stream.
	ResponseType PayloadType `protobuf:"varint,1,opt,name=response_type,json=responseType,proto3,enum=grpc_gcp.continuous_load_testing.PayloadType" json:"response_type,omitempty"`
	// Configuration for each expected response message.
	ResponseParameters []*ResponseParameters `protobuf:"bytes,2,rep,name=response_parameters,json=responseParameters,proto3" json:"response_parameters,omitempty"`
	// Optional input payload sent along with the request.
	Payload *Payload `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// Whether server should return a given status
	ResponseStatus *EchoStatus `protobuf:"bytes,7,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *StreamingOutputCallRequest) Reset() {
	*x = StreamingOutputCallRequest{}
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingOutputCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingOutputCallRequest) ProtoMessage() {}

func (x *StreamingOutputCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingOutputCallRequest.ProtoReflect.Descriptor instead.
func (*StreamingOutputCallRequest) Descriptor() ([]byte, []int) {
	return file_grpc_gcp_testing_messages_proto_rawDescGZIP(), []int{8}
}

func (x *StreamingOutputCallRequest) GetResponseType() PayloadType {
	if x != nil {
		return x.ResponseType
	}
	return PayloadType_COMPRESSABLE
}

func (x *StreamingOutputCallRequest) GetResponseParameters() []*ResponseParameters {
	if x != nil {
		return x.ResponseParameters
	}
	return nil
}

func (x *StreamingOutputCallRequest) GetPayload() *Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *StreamingOutputCallRequest) GetResponseStatus() *EchoStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

// Server-streaming response, as configured by the request and parameters.
type StreamingOutputCallResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Payload to increase response size.
	Payload       *Payload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamingOutputCallResponse) Reset() {
	*x = StreamingOutputCallResponse{}
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingOutputCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingOutputCallResponse) ProtoMessage() {}

func (x *StreamingOutputCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_gcp_testing_messages_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingOutputCallResponse.ProtoReflect.Descriptor instead.
func (*StreamingOutputCallResponse) Descriptor() ([]byte, []int) {
	return file_grpc_gcp_testing_messages_proto_rawDescGZIP(), []int{9}
}

func (x *StreamingOutputCallResponse) GetPayload() *Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_grpc_gcp_testing_messages_proto protoreflect.FileDescriptor

const file_grpc_gcp_testing_messages_proto_rawDesc = "" +
	"\n" +
	"\x1fgrpc_gcp/testing/messages.proto\x12 grpc_gcp.continuous_load_testing\"!\n" +
	"\tBoolValue\x12\x14\n" +
	"\x05value\x18\x01 \x01(\bR\x05value\"`\n" +
	"\aPayload\x12A\n" +
	"\x04type\x18\x01 \x01(\x0e2-.grpc_gcp.continuous_load_testing.PayloadTypeR\x04type\x12\x12\n" +
	"\x04body\x18\x02 \x01(\fR\x04body\":\n" +
	"\n" +
	"EchoStatus\x12\x12\n" +
	"\x04code\x18\x01 \x01(\x05R\x04code\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\x86\x05\n" +
	"\rSimpleRequest\x12R\n" +
	"\rresponse_type\x18\x01 \x01(\x0e2-.grpc_gcp.continuous_load_testing.PayloadTypeR\fresponseType\x12#\n" +
	"\rresponse_size\x18\x02 \x01(\x05R\fresponseSize\x12C\n" +
	"\apayload\x18\x03 \x01(\v2).grpc_gcp.continuous_load_testing.PayloadR\apayload\x12#\n" +
	"\rfill_username\x18\x04 \x01(\bR\ffillUsername\x12(\n" +
	"\x10fill_oauth_scope\x18\x05 \x01(\bR\x0efillOauthScope\x12\\\n" +
	"\x13response_compressed\x18\x06 \x01(\v2+.grpc_gcp.continuous_load_testing.BoolValueR\x12responseCompressed\x12U\n" +
	"\x0fresponse_status\x18\a \x01(\v2,.grpc_gcp.continuous_load_testing.EchoStatusR\x0eresponseStatus\x12X\n" +
	"\x11expect_compressed\x18\b \x01(\v2+.grpc_gcp.continuous_load_testing.BoolValueR\x10expectCompressed\x12$\n" +
	"\x0efill_server_id\x18\t \x01(\bR\ffillServerId\x123\n" +
	"\x16fill_grpclb_route_type\x18\n" +
	" \x01(\bR\x13fillGrpclbRouteType\"\xaa\x02\n" +
	"\x0eSimpleResponse\x12C\n" +
	"\apayload\x18\x01 \x01(\v2).grpc_gcp.continuous_load_testing.PayloadR\apayload\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x1f\n" +
	"\voauth_scope\x18\x03 \x01(\tR\n" +
	"oauthScope\x12\x1b\n" +
	"\tserver_id\x18\x04 \x01(\tR\bserverId\x12]\n" +
	"\x11grpclb_route_type\x18\x05 \x01(\x0e21.grpc_gcp.continuous_load_testing.GrpclbRouteTypeR\x0fgrpclbRouteType\x12\x1a\n" +
	"\bhostname\x18\x06 \x01(\tR\bhostname\"\xba\x01\n" +
	"\x19StreamingInputCallRequest\x12C\n" +
	"\apayload\x18\x01 \x01(\v2).grpc_gcp.continuous_load_testing.PayloadR\apayload\x12X\n" +
	"\x11expect_compressed\x18\x02 \x01(\v2+.grpc_gcp.continuous_load_testing.BoolValueR\x10expectCompressed\"T\n" +
	"\x1aStreamingInputCallResponse\x126\n" +
	"\x17aggregated_payload_size\x18\x01 \x01(\x05R\x15aggregatedPayloadSize\"\x96\x01\n" +
	"\x12ResponseParameters\x12\x12\n" +
	"\x04size\x18\x01 \x01(\x05R\x04size\x12\x1f\n" +
	"\vinterval_us\x18\x02 \x01(\x05R\n" +
	"intervalUs\x12K\n" +
	"\n" +
	"compressed\x18\x03 \x01(\v2+.grpc_gcp.continuous_load_testing.BoolValueR\n" +
	"compressed\"\xf3\x02\n" +
	"\x1aStreamingOutputCallRequest\x12R\n" +
	"\rresponse_type\x18\x01 \x01(\x0e2-.grpc_gcp.continuous_load_testing.PayloadTypeR\fresponseType\x12e\n" +
	"\x13response_parameters\x18\x02 \x03(\v24.grpc_gcp.continuous_load_testing.ResponseParametersR\x12responseParameters\x12C\n" +
	"\apayload\x18\x03 \x01(\v2).grpc_gcp.continuous_load_testing.PayloadR\apayload\x12U\n" +
	"\x0fresponse_status\x18\a \x01(\v2,.grpc_gcp.continuous_load_testing.EchoStatusR\x0eresponseStatus\"b\n" +
	"\x1bStreamingOutputCallResponse\x12C\n" +
	"\apayload\x18\x01 \x01(\v2).grpc_gcp.continuous_load_testing.PayloadR\apayload*\x1f\n" +
	"\vPayloadType\x12\x10\n" +
	"\fCOMPRESSABLE\x10\x00*o\n" +
	"\x0fGrpclbRouteType\x12\x1d\n" +
	"\x19GRPCLB_ROUTE_TYPE_UNKNOWN\x10\x00\x12\x1e\n" +
	"\x1aGRPCLB_ROUTE_TYPE_FALLBACK\x10\x01\x12\x1d\n" +
	"\x19GRPCLB_ROUTE_TYPE_BACKEND\x10\x02B0Z.continuous_load_testing/proto/grpc_gcp/testingb\x06proto3"

var (
	file_grpc_gcp_testing_messages_proto_rawDescOnce sync.Once
	file_grpc_gcp_testing_messages_proto_rawDescData []byte
)

func file_grpc_gcp_testing_messages_proto_rawDescGZIP() []byte {
	file_grpc_gcp_testing_messages_proto_rawDescOnce.Do(func() {
		file_grpc_gcp_testing_messages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_grpc_gcp_testing_messages_proto_rawDesc), len(file_grpc_gcp_testing_messages_proto_rawDesc)))
	})
	return file_grpc_gcp_testing_messages_proto_rawDescData
}

var file_grpc_gcp_testing_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_grpc_gcp_testing_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_grpc_gcp_testing_messages_proto_goTypes = []any{
	(PayloadType)(0),                    // 0: grpc_gcp.continuous_load_testing.PayloadType
	(GrpclbRouteType)(0),                // 1: grpc_gcp.continuous_load_testing.GrpclbRouteType
	(*BoolValue)(nil),                   // 2: grpc_gcp.continuous_load_testing.BoolValue
	(*Payload)(nil),                     // 3: grpc_gcp.continuous_load_testing.Payload
	(*EchoStatus)(nil),                  // 4: grpc_gcp.continuous_load_testing.EchoStatus
	(*SimpleRequest)(nil),               // 5: grpc_gcp.continuous_load_testing.SimpleRequest
	(*SimpleResponse)(nil),              // 6: grpc_gcp.continuous_load_testing.SimpleResponse
	(*StreamingInputCallRequest)(nil),   // 7: grpc_gcp.continuous_load_testing.StreamingInputCallRequest
	(*StreamingInputCallResponse)(nil),  // 8: grpc_gcp.continuous_load_testing.StreamingInputCallResponse
	(*ResponseParameters)(nil),          // 9: grpc_gcp.continuous_load_testing.ResponseParameters
	(*StreamingOutputCallRequest)(nil),  // 10: grpc_gcp.continuous_load_testing.StreamingOutputCallRequest
	(*StreamingOutputCallResponse)(nil), // 11: grpc_gcp.continuous_load_testing.StreamingOutputCallResponse
}
var file_grpc_gcp_testing_messages_proto_depIdxs = []int32{
	0,  // 0: grpc_gcp.continuous_load_testing.Payload.type:type_name -> grpc_gcp.continuous_load_testing.PayloadType
	0,  // 1: grpc_gcp.continuous_load_testing.SimpleRequest.response_type:type_name -> grpc_gcp.continuous_load_testing.PayloadType
	3,  // 2: grpc_gcp.continuous_load_testing.SimpleRequest.payload:type_name -> grpc_gcp.continuous_load_testing.Payload
	2,  // 3: grpc_gcp.continuous_load_testing.SimpleRequest.response_compressed:type_name -> grpc_gcp.continuous_load_testing.BoolValue
	4,  // 4: grpc_gcp.continuous_load_testing.SimpleRequest.response_status:type_name -> grpc_gcp.continuous_load_testing.EchoStatus
	2,  // 5: grpc_gcp.continuous_load_testing.SimpleRequest.expect_compressed:type_name -> grpc_gcp.continuous_load_testing.BoolValue
	3,  // 6: grpc_gcp.continuous_load_testing.SimpleResponse.payload:type_name -> grpc_gcp.continuous_load_testing.Payload
	1,  // 7: grpc_gcp.continuous_load_testing.SimpleResponse.grpclb_route_type:type_name -> grpc_gcp.continuous_load_testing.GrpclbRouteType
	3,  // 8: grpc_gcp.continuous_load_testing.StreamingInputCallRequest.payload:type_name -> grpc_gcp.continuous_load_testing.Payload
	2,  // 9: grpc_gcp.continuous_load_testing.StreamingInputCallRequest.expect_compressed:type_name -> grpc_gcp.continuous_load_testing.BoolValue
	2,  // 10: grpc_gcp.continuous_load_testing.ResponseParameters.compressed:type_name -> grpc_gcp.continuous_load_testing.BoolValue
	0,  // 11: grpc_gcp.continuous_load_testing.StreamingOutputCallRequest.response_type:type_name -> grpc_gcp.continuous_load_testing.PayloadType
	9,  // 12: grpc_gcp.continuous_load_testing.StreamingOutputCallRequest.response_parameters:type_name -> grpc_gcp.continuous_load_testing.ResponseParameters
	3,  // 13: grpc_gcp.continuous_load_testing.StreamingOutputCallRequest.payload:type_name -> grpc_gcp.continuous_load_testing.Payload
	4,  // 14: grpc_gcp.continuous_load_testing.StreamingOutputCallRequest.response_status:type_name -> grpc_gcp.continuous_load_testing.EchoStatus
	3,  // 15: grpc_gcp.continuous_load_testing.StreamingOutputCallResponse.payload:type_name -> grpc_gcp.continuous_load_testing.Payload
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_grpc_gcp_testing_messages_proto_init() }
func file_grpc_gcp_testing_messages_proto_init() {
	if File_grpc_gcp_testing_messages_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_grpc_gcp_testing_messages_proto_rawDesc), len(file_grpc_gcp_testing_messages_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_grpc_gcp_testing_messages_proto_goTypes,
		DependencyIndexes: file_grpc_gcp_testing_messages_proto_depIdxs,
		EnumInfos:         file_grpc_gcp_testing_messages_proto_enumTypes,
		MessageInfos:      file_grpc_gcp_testing_messages_proto_msgTypes,
	}.Build()
	File_grpc_gcp_testing_messages_proto = out.File
	file_grpc_gcp_testing_messages_proto_goTypes = nil
	file_grpc_gcp_testing_messages_proto_depIdxs = nil
}
