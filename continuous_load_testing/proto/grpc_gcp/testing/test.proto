syntax = "proto3";

import "grpc_gcp/testing/messages.proto";
import "grpc_gcp/testing/empty.proto";

package grpc_gcp.testing;

option go_package = "continuous_load_testing/proto/grpc_gcp/testing";


// A simple service to test the various types of RPCs and experiment with
// performance with various types of payload.
service TestService {
  // One empty request followed by one empty response.
  rpc EmptyCall(grpc.testing.Empty) returns (grpc.testing.Empty);

  // One request followed by one response.
  rpc UnaryCall(SimpleRequest) returns (SimpleResponse);

  // One request followed by one response. Response has cache control
  // headers set such that a caching HTTP proxy (such as GFE) can
  // satisfy subsequent requests.
  rpc CacheableUnaryCall(SimpleRequest) returns (SimpleResponse);

  // One request followed by a sequence of responses (streamed download).
  // The server returns the payload with client desired type and sizes.
  rpc StreamingOutputCall(StreamingOutputCallRequest)
    returns (stream StreamingOutputCallResponse);

  // A sequence of requests followed by one response (streamed upload).
  // The server returns the aggregated size of client payload as the result.
  rpc StreamingInputCall(stream StreamingInputCallRequest)
    returns (StreamingInputCallResponse);

  // A sequence of requests with each request served by the server immediately.
  // As one request could lead to multiple responses, this interface
  // demonstrates the idea of full duplexing.
  rpc FullDuplexCall(stream StreamingOutputCallRequest)
    returns (stream StreamingOutputCallResponse);

  // A sequence of requests followed by a sequence of responses.
  // The server buffers all the client requests and then serves them in order. A
  // stream of responses are returned to the client when the server starts with
  // first request.
  rpc HalfDuplexCall(stream StreamingOutputCallRequest)
    returns (stream StreamingOutputCallResponse);

  // The test server will not implement this method. It will be used
  // to test the behavior when clients call unimplemented methods.
  rpc UnimplementedCall(grpc.testing.Empty) returns (grpc.testing.Empty);


  // A persistent bidirectional streaming RPC where messages are in sequence in the same bidi stream.
  // The client sends one request followed by one response.
  // This sequential message exchange over a bidi stream is used to benchmark
  // latency in Streamed Batching.
  rpc StreamedSequentialUnaryCall(stream SimpleRequest) returns (stream SimpleResponse);
}

// A simple service NOT implemented at servers so clients can test for
// that case.
service UnimplementedService {
  // A call that no server should implement
  rpc UnimplementedCall(grpc.testing.Empty) returns (grpc.testing.Empty);
}

// A service used to control reconnect server.
service ReconnectService {
  rpc Start(grpc.testing.ReconnectParams) returns (grpc.testing.Empty);
  rpc Stop(grpc.testing.Empty) returns (grpc.testing.ReconnectInfo);
}

// A service used to obtain stats for verifying LB behavior.
service LoadBalancerStatsService {
  // Gets the backend distribution for RPCs sent by a test client.
  rpc GetClientStats(LoadBalancerStatsRequest)
    returns (LoadBalancerStatsResponse) {}

  // Gets the accumulated stats for RPCs sent by a test client.
  rpc GetClientAccumulatedStats(LoadBalancerAccumulatedStatsRequest)
    returns (LoadBalancerAccumulatedStatsResponse) {}
}

// Hook service. Used to keep Kubernetes from shutting the pod down.
service HookService {
  // Sends a request that will "hang" until the return status is set by a call
  // to a SetReturnStatus
  rpc Hook(grpc.testing.Empty) returns (grpc.testing.Empty);
  // Sets a return status for pending and upcoming calls to Hook
  rpc SetReturnStatus(SetReturnStatusRequest) returns (grpc.testing.Empty);
  // Clears the return status. Incoming calls to Hook will "hang"
  rpc ClearReturnStatus(grpc.testing.Empty) returns (grpc.testing.Empty);
}

// A service to remotely control health status of an xDS test server.
service XdsUpdateHealthService {
  rpc SetServing(grpc.testing.Empty) returns (grpc.testing.Empty);
  rpc SetNotServing(grpc.testing.Empty) returns (grpc.testing.Empty);
  rpc SendHookRequest(HookRequest) returns (HookResponse);
}

// A service to dynamically update the configuration of an xDS test client.
service XdsUpdateClientConfigureService {
  // Update the tes client's configuration.
  rpc Configure(ClientConfigureRequest) returns (ClientConfigureResponse);
}